/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<pair<int, ListNode*>, vector<pair<int, ListNode*>>, greater<pair<int, ListNode*>>> minHeap{};
        for(int i{0}; i < lists.size(); i++){
            ListNode *myNode = lists[i];
            if(myNode)minHeap.push({myNode->val, myNode});
        }

        ListNode *dummyNode = new ListNode(-1);
        ListNode *curr = dummyNode;
        while(!minHeap.empty()){
            curr->next = minHeap.top().second;
            minHeap.pop();
            curr = curr->next;
            if(curr->next)minHeap.push({curr->next->val, curr->next});
        }
        return dummyNode->next;

        
    }
};