/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode *reverseTheLinkedList(ListNode *head){
        ListNode *temp = head;
        ListNode *prev = nullptr;
        while(temp){
            ListNode *front = temp->next;
            temp->next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        if(head->next == NULL)return true;
        ListNode *fast = head;
        ListNode *slow = head;
        while(fast->next != NULL && fast->next->next != NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        ListNode *newHead = reverseTheLinkedList(slow->next);
        ListNode *temp1 = head;
        ListNode *temp2 = newHead;
        while(temp2){
            if(temp1->val != temp2->val){
                reverseTheLinkedList(newHead);
                return false;
            }
            temp1 = temp1->next;
            temp2 = temp2->next;
        }

        reverseTheLinkedList(newHead);
        return true;


        
    }
};