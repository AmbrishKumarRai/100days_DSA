class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        if(n1 > n2) return findMedianSortedArrays(nums2, nums1);

        int leftPart = (n1 + n2 + 1)/2;
        int start{0}, end{n1};
        while(start <= end){
            int midIndex = start + (end - start)/2;
            int mid1 = midIndex;
            int mid2 = leftPart - mid1;
            int l1{INT_MIN}, l2{INT_MIN};
            int r1{INT_MAX}, r2{INT_MAX};
            if(mid1 < n1) r1 = nums1[mid1];
            if(mid2 < n2) r2 = nums2[mid2];
            if(mid1 > 0) l1 = nums1[mid1 - 1];
            if(mid2 > 0) l2 = nums2[mid2 - 1];
            if(l1 <= r2 && l2 <= r1){
                if( (n1 + n2) % 2 == 0 ){
                    return (double)(max(l1, l2) + min(r1, r2))/2.0;
                }else return (double)max(l1, l2);
            }else if(l2 > r1)start = midIndex + 1;
            else end = midIndex - 1;
        }

        return 0;
        
    }
};